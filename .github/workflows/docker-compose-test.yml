name: Docker Compose Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test-docker-compose:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Create a basic .env file for testing if one doesn't exist
      - name: Create test .env file
        run: |
          if [ ! -f .env ]; then
            echo "Creating basic .env file for testing"
            echo "BACKEND_PORT=8000" > .env
            echo "FRONTEND_PORT=3000" >> .env
          fi

      # Test shell script version
      - name: Run start.sh script
        run: |
          chmod +x ./start.sh
          ./start.sh

      - name: Verify containers are running
        run: |
          # Wait for containers to initialize
          sleep 10

          # Check if both containers are running
          BACKEND_RUNNING=$(docker ps --filter "name=untec-backend" --format '{{.Names}}' | grep untec-backend)
          FRONTEND_RUNNING=$(docker ps --filter "name=untec-frontend" --format '{{.Names}}' | grep untec-frontend)

          if [ -z "$BACKEND_RUNNING" ]; then
            echo "Backend container is not running!"
            docker-compose logs backend
            exit 1
          fi

          if [ -z "$FRONTEND_RUNNING" ]; then
            echo "Frontend container is not running!"
            docker-compose logs frontend
            exit 1
          fi

          echo "All containers are running successfully."

      - name: Check if services are responsive
        run: |
          # Check if backend service is responding
          BACKEND_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 || echo "Failed")
          if [ "$BACKEND_RESPONSE" = "Failed" ] && [ "$BACKEND_RESPONSE" != "200" ]; then
            echo "Backend service is not responding properly!"
            docker-compose logs backend
          else
            echo "Backend service is responding."
          fi

          # Check if frontend service is responding
          FRONTEND_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "Failed")
          if [ "$FRONTEND_RESPONSE" = "Failed" ] && [ "$FRONTEND_RESPONSE" != "200" ]; then
            echo "Frontend service is not responding properly!"
            docker-compose logs frontend
          else
            echo "Frontend service is responding."
          fi

      - name: Run stop.sh script
        run: |
          chmod +x ./stop.sh
          ./stop.sh

      - name: Verify containers are stopped
        run: |
          # Check if containers are stopped
          CONTAINERS_RUNNING=$(docker ps --filter "name=untec-" --format '{{.Names}}')

          if [ -n "$CONTAINERS_RUNNING" ]; then
            echo "Some containers are still running: $CONTAINERS_RUNNING"
            exit 1
          fi

          echo "All containers have been successfully stopped."
